buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.7.+'
    }
}

apply plugin: 'android'

repositories {
    maven {
        url "http://www.bugsense.com/gradle/"
    }
    maven {
        url 'http://google-api-client-libraries.appspot.com/mavenrepo'
    }
}

dependencies {
    compile project(':core')
    compile 'com.novoda:sqliteprovider-core:1.0.0'
    compile 'com.novoda:notils:2.1-SNAPSHOT'
    compile 'com.novoda:typewriter:0.0.3-SNAPSHOT'
    compile 'com.google.android:support-v4:r13.1'
    compile 'com.squareup.picasso:picasso:2.1.1'

    compile('com.github.frankiesardo:icepick:1.2') {
        exclude module: 'support-v4'
    }

    compile('com.ouchadam.bookkeeper:core:0.1.1-alpha') {
        exclude module: 'support-v4'
    }
    compile 'com.github.chrisbanes.actionbarpulltorefresh:library:0.9.1'
    compile "com.bugsense.trace:bugsense:3.6"

    compile('com.google.android.gms:play-services:3.2.25') {
        exclude module: 'support-v4'
    }

    compile('com.google.api-client:google-api-client:1.17.0-rc') {
        exclude module: 'xpp3'
        exclude module: 'httpclient'
        exclude module: 'junit'
        exclude module: 'android'
    }

    compile(group: 'com.google.api-client', name: 'google-api-client-android', version: '1.17.0-rc') {
        exclude(group: 'com.google.android.google-play-services', module: 'google-play-services')
    }

    compile(group: 'com.google.http-client', name: 'google-http-client-android', version: '1.17.0-rc') {
        exclude(group: 'com.google.android', module: 'android')
    }
    compile(group: 'com.google.guava', name: 'guava', version: '14.0.+')
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.0"

    defaultConfig {
        versionCode 16
        versionName "0.1.17"
        minSdkVersion 14
        targetSdkVersion 19
    }

    String fangKeyProperties = "FangKey.properties"
    if (project.hasProperty(fangKeyProperties) && new File(project.property(fangKeyProperties)).exists()) {

        Properties props = new Properties()
        props.load(new FileInputStream(file(project.property(fangKeyProperties))))

        signingConfigs {
            release {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keyAlias']
                keyPassword props['keyPassword']
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }

}


